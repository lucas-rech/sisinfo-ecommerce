basePath: /api/v1
definitions:
  domain.Category:
    enum:
    - CLOTHING
    - ACCESSORIES
    - PERSONALITY
    type: string
    x-enum-varnames:
    - CategoryClothing
    - CategoryAcessories
    - CategoryPersonality
  dto.CartItemCreateRequest:
    properties:
      product_id:
        type: integer
      quantity:
        maximum: 10
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  dto.CartItemResponse:
    properties:
      cart_id:
        type: integer
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  dto.CartItemUpdateRequest:
    properties:
      product_id:
        type: integer
      quantity:
        maximum: 10
        type: integer
    required:
    - product_id
    - quantity
    type: object
  dto.ProductCreateRequest:
    properties:
      category:
        allOf:
        - $ref: '#/definitions/domain.Category'
        enum:
        - CLOTHING
        - ACCESSORIES
        - PERSONALITY
      description:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - category
    - name
    - price
    - stock
    type: object
  dto.ProductResponse:
    properties:
      category:
        allOf:
        - $ref: '#/definitions/domain.Category'
        enum:
        - CLOTHING
        - ACCESSORIES
        - PERSONALITY
      description:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  dto.ProductUpdateRequest:
    properties:
      category:
        $ref: '#/definitions/domain.Category'
      description:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  dto.UserCreateRequest:
    properties:
      address:
        type: string
      email:
        type: string
      last_name:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
    required:
    - address
    - email
    - last_name
    - name
    - password
    - phone
    type: object
  dto.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserResponse:
    properties:
      address:
        type: string
      cart_id:
        type: integer
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  dto.UserUpdateRequest:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample e-commerce API for Sisinfo course.
  termsOfService: http://swagger.io/terms/
  title: Sisinfo E-commerce API
  version: "1.0"
paths:
  /cart/item:
    patch:
      consumes:
      - application/json
      description: Update the quantity of a product in the user's cart
      parameters:
      - description: Cart Item Update Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CartItemUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an item in the user's cart
      tags:
      - Cart Items
    post:
      consumes:
      - application/json
      description: Add a product to the user's cart with a specified quantity
      parameters:
      - description: Cart Item Create Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CartItemCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add an item to the user's cart
      tags:
      - Cart Items
  /cart/item/{item_id}:
    delete:
      consumes:
      - application/json
      description: Remove a product from user's cart. It uses the product ID to identify
        which item to remove and assumes the user is authenticated with a valid JWT
        token.
      parameters:
      - description: Product ID to remove from cart
        in: query
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Remove an item from the user's cart
      tags:
      - Cart Items
  /cart/items:
    get:
      consumes:
      - application/json
      description: Retrieve all items in the user's cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CartItemResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all items in the user's cart
      tags:
      - Cart Items
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Login
      tags:
      - Users
  /login/register:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - Users
  /product:
    post:
      consumes:
      - application/json
      description: Create a new product with the provided details
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - '[ADMIN] Products'
  /product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - '[ADMIN] roducts'
    get:
      consumes:
      - application/json
      description: Retrieve a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Find a product by ID
      tags:
      - Products
    patch:
      consumes:
      - application/json
      description: Update a product with the provided details
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - '[ADMIN] Products'
  /products:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProductResponse'
            type: array
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Find all products
      tags:
      - Products
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - '[ADMIN] Users'
    get:
      consumes:
      - application/json
      description: Retrieve a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Find a user by ID
      tags:
      - '[ADMIN] Users'
  /user/email/{email}:
    get:
      consumes:
      - application/json
      description: Retrieve a user by their email address
      parameters:
      - description: User Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Find a user by email
      tags:
      - '[ADMIN] Users'
  /user/update:
    patch:
      consumes:
      - application/json
      description: Update user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - '[ADMIN] Users'
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
